name: CI/CD Workflow

on:
  push:
    branches:
      - main
      - "*" # For all other branches
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.6

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Install dependencies
      run: |
        poetry config virtualenvs.create true
        poetry install

    - name: Run tests with coverage
      run: poetry run pytest -m "not slow" --cov=rl_envs_forge --cov-report=term-missing

  tag:
    needs: test
    if: github.ref == 'refs/heads/main' # Ensures this only runs on the main branch
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout code with full history
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
  
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
  
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
  
    - name: Extract version from pyproject.toml
      run: echo "PROJECT_VERSION=$(poetry version --short)" >> $GITHUB_ENV
  
    - name: Check if tag already exists
      run: |
        if git rev-parse "v${{ env.PROJECT_VERSION }}" >/dev/null 2>&1; then
          echo "Error: Tag v${{ env.PROJECT_VERSION }} already exists. Please increment the version in pyproject.toml."
          exit 1
        fi
  
    - name: Set up Git credentials
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
  
    - name: Set Git remote using GITHUB_TOKEN
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
  
    - name: Create a new tag
      run: |
        git tag v${{ env.PROJECT_VERSION }}
        git push origin "v${{ env.PROJECT_VERSION }}"

  deploy:
    needs: tag
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry self update

    - name: Clean build environment
      run: |
        rm -rf dist build *.egg-info
    
    - name: Build the package with verbose logging
      run: |
        poetry build --verbose

    - name: Verify build contents
      run: |
        tar -tf dist/*.tar.gz
        unzip -l dist/*.whl

    - name: Publish package
      run: |
        poetry publish --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }}
